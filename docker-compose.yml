#TOOO:
#app-server and db better be deployed in different containers
version: '3.7'
services:
    #web server
    web-server:
        image: nginx:alpine
        container_name: nginx
        ports:
            - "80:80"
        networks:
            - frontend
        volumes:
            - ./nginx.conf:/etc/nginx/conf.d/default.conf
        depends_on:
            - todo-list
        deploy:
            replicas: 1
            restart_policy:
                condition: on-failure
            placement:
                constraints: [node.role == worker]
            resources:
                limits:
                    cpus: '0.50'
                    memory: 50M
                reservations:
                    cpus: '0.30'
                    memory: 20M
    #app
    todo-list:
        #build: .
        image: todo-list:latest
        expose:
            - 5000
        networks:
            - frontend
            - backend
        depends_on:
            - database
        deploy:
            replicas: 3
            restart_policy:
                condition: on-failure
            placement:
                constraints: [node.role == worker]
            resources:
                limits:
                    cpus: '0.20'
                    memory: 10M
                reservations:
                    cpus: '0.10'
                    memory: 5M
    #db
    database:
        image: postgres:9.4
        container_name: db-container
        volumes:
            - db-data:/var/lib/postgresql/data
        expose:
            - 5432
        env_file:
            - "./db/env"
        networks:
            - backend
        restart: always
        deploy:
            replicas: 1
            restart_policy:
                condition: on-failure
            placement:
                constraints: [node.role == manager]
            resources:
                limits:
                    cpus: '0.50'
                    memory: 50M
                reservations:
                    cpus: '0.30'
                    memory: 40M
networks:
    frontend:
        driver: overlay
    backend:
        driver: overlay
volumes:
    db-data:
